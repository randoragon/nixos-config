#!/usr/bin/env python3

# GENerate Stream LICense information
#
# This script generates a markdown list of license information about
# Fair Use tracks split into license types and artists.
#
# DEPENDENCIES
# - python mutagen

from mutagen.id3 import ID3
from os.path import expanduser

PLAYLIST = '{}/Music/Playlists/#Fair Use.m3u'.format(expanduser('~'))
ROOTDIR = '{}/Music'.format(expanduser('~'))
OUTPUT = 'licenses.md'

out = open(OUTPUT, 'w')

artists = {}

for f in sorted(open(PLAYLIST, 'r').readlines()):
    f = f.strip()
    tags = ID3(f'{ROOTDIR}/{f}')
    if 'TPE1' in tags and 'TCOP' in tags and 'TIT2' and 'WXXX:origin' in tags:
        artist = tags['TPE1'].text[0]
        license = tags['TCOP'].text[0]
        lurl = tags['WCOP'].url if 'WCOP' in tags else None
        title = tags['TIT2'].text[0]
        murl = tags['WXXX:origin'].url
    else:
        print("genslic: file '{}' is missing tags (skipping)".format(f))
        continue

    if artist not in artists:
        artists[artist] = {}
    if license not in artists[artist]:
        artists[artist][license] = [lurl]

    artists[artist][license].append((title, murl))

for i in sorted(artists.items(), key=lambda x: x[0].upper()):
    out.write(f'<details><summary><b>{i[0]}</b></summary>\n\n')
    for j in i[1].items():
        if j[1][0] is not None:
            out.write(f'- [{j[0]}]({j[1][0]})\n')
        else:
            out.write(f'- {j[0]}\n')
        for k in j[1][1:]:
            out.write(f'    - [{k[0]}]({k[1]})\n')
    out.write('\n</details>\n\n')

out.close()
