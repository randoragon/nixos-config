#!/bin/sh

# Generate a smart, seamless playlist. Interactive.
#
# Dependencies:
# - mpd, mpc
# - rg (ripgrep)
# - lua

musicdir=~/Music
pldir="$musicdir"/Playlists
plout="${1:-$pldir/.Generated.m3u}"
mappings="${XDG_CONFIG_HOME:-$HOME/.config}/playlist-mappings.tsv"
mpdpl="$(mktemp -t plgen.XXXXX)"
setting="$(mktemp -t plgen.XXXXX)"
tmp="$(mktemp -t plgen.XXXXX)" # aux buffer
maxcols=5

# External lua script for generating filtered playlists
lua_filter=~/.scripts/plfilter_filter.lua

# External lua script for generating smart, seamless playlists
lua_generate=~/.scripts/plgen_generate.lua

# External lua script for filtering out unavailable songs
lua_available=~/.scripts/plgen_available.lua

cleanup () {
    rm -f -- "$tmp" "$setting" "$mpdpl"
    exit 0
}
trap cleanup INT QUIT TERM EXIT

last_termw=
last_change=
available_songs=

eprint () {
    tput sgr0 >&2
    printf '  ' >&2
    tput setaf 15 setab 1 >&2
    printf "$@" >&2
    tput sgr0 >&2
}

# Read playlist mappings
[ ! -r "$mappings" ] && {
    printf 'Failed to read %s.\n' "$mappings" >&2
    exit 1
}
playlists=
while read -r line; do
    [ -z "$line" ] && playlists="$playlists
" && continue
    fname="${line%%	*}"
    prefix="${line##*	}"
    [ ! -f "$pldir/$fname.m3u" ] && eprint 'Playlist not found: %s\n' "$fname" && exit
    playlists="$playlists
$fname.m3u"
done <"$mappings"

# Detect mapping collisions
duplicates="$(cut -d'	' -f2 -- "$mappings" | sort | uniq -d)"
[ -n "$duplicates" ] && {
    eprint "Prefix collisions: "
    for dupe in ${duplicates% *}; do
        eprint "$dupe"
    done
    eprint '\n'
    exit 2
}

getprefix () {
    match="$(rg -F -- "$1	" "$mappings")"
    echo "${match##*	}"
}

getplaylist () {
    [ "$1" = '.' ] && echo "$mpdpl" && return
    match="$(cut -d'	' -f2 -- "$mappings" | rg -Fn -- "$1")"
    [ -z "$match" ] && return
    fname="$(sed -n "${match%%:*}s/	.*//p" "$mappings")"
    printf "%s/%s.m3u" "$pldir" "$fname"
}

main () {
    # Parse menu inputs
    [ "$1" = q ] && echo Bye. && exit
    [ "$1" =  ] && {
        clear
        tput setaf 5
        echo "Item pool: $(echo "$available_songs" | wc -l)"
        tput sgr0
        printf 'Enter the desired number of items (%sN%s), or the desired length (%s[HH:]MM:[SS]%s):' \
            "$(tput bold setaf 4)" "$(tput sgr0)" "$(tput bold setaf 4)" "$(tput sgr0)"
        printf '\n> '
        read -r ans
        echo "$available_songs" | $lua_generate "$ans" >"$plout"
        exit
    }

    # Update MPD playlist
    mpc -f %file% playlist >"$mpdpl"

    # Parse user input
    [ -n "$1" ] && {
        left="$1"
        while [ -n "$left" ]; do
            prefix="${left%"${left#?}"}"
            left="${left#?}"
            plfile="$(getplaylist "$prefix")"
            [ -z "$plfile" ] && {
                eprint 'Missing playlist for prefix: %s\n' "$prefix"
                continue
            }
            [ ! -f "$plfile" ] && {
                eprint 'No such file: "%s"\n' "$plfile"
                continue
            }
            line="$(rg -Fn -- "$plfile" "$setting")"
            if [ -z "$line" ]; then
                echo "+$plfile" >>"$setting"
            else
                [ "$(printf '%s' "$line" | wc -l)" -ne 0 ] && eprint 'More than one match for "%s"\n' "$plfile" && return
                lineno="${line%%:*}"
                state="${line#*:}"
                state="${state%"${state#?}"}"
                if [ "$state" = + ]; then
                    sed -i "${lineno}s/^\+/-/" "$setting"
                elif [ "$state" = - ]; then
                    sed -i "${lineno}d" "$setting"
                else
                    eprint 'Invalid line in setting: "%s"\n' "$line"
                fi
            fi
            sort -k1.1,1.1 -o "$setting" "$setting"
        done
    }

    # Print header
    clear
    tput setab 15 setaf 0 bold
    printf ' plgen '
    tput sgr0
    printf ' %sq%s exit  '   "$(tput bold setaf 4)" "$(tput sgr0)"
    printf ' %sESC%s accept  '   "$(tput bold setaf 4)" "$(tput sgr0)"
    col="$(tput setaf 7)"
    if rg -Fq -- "+$mpdpl" "$setting"; then
        col="$(tput bold setaf 10)"
    elif rg -Fq -- "-$mpdpl" "$setting"; then
        col="$(tput setaf 9)"
    fi
    printf '%s.%s mpd  '     "$(tput setaf 4)" "$col"
    nlines_available=0
    nlines_total=0
    available_songs=
    filtered_songs="$($lua_filter <"$setting")"
    [ -n "$filtered_songs" ] && {
        available_songs="$(echo "$filtered_songs" | $lua_available)"
        nlines_available="$(echo "$available_songs" | wc -l)"
        nlines_total="$(echo "$filtered_songs" | wc -l)"
    }
    printf '%s(%s/%s result%s)\n' "$(tput setaf 5)" "$nlines_available" "$nlines_total" "$([ "$nlines_total" -eq 1 ] || printf 's')"
    tput sgr0
    # Print last non-empty line input by user
    [ -n "$1" ] && last_change="$1"
    tput sgr0 setaf 7
    printf '\n  %s\n' "$last_change"

    # Recalculate column layout
    termw="$(tput cols)"
    [ "$termw" != "$last_termw" ] && {
        printf 0 >"$tmp"
        echo "$playlists" | while read -r plname; do
            w="$(printf '%s' "${plname%.m3u}" | wc -m)"
            [ "$w" -gt "$(cat -- "$tmp")" ] && printf '%s' "$w" >"$tmp"
        done
        entryw="$(cat -- "$tmp")"
        entrycols="$(( (termw - 2) / (entryw + 4) ))"
        [ "$entrycols" -lt 1 ] && entrycols=1
        [ "$entrycols" -gt $maxcols ] && entrycols=$maxcols
        last_termw="$termw"
    }

    # Print playlists state
    i=0
    :>"$tmp"
    echo "$playlists" | while read -r plname; do
        [ -z "$plname" ] && {
            cat -- "$tmp"
            :>"$tmp"
            if [ $i -eq 0 ]; then printf '\n'; else printf '\n\n'; fi
            i=0
            continue
        }
        plfile="$pldir/$plname"
        prefix="$(getprefix "${plname%.m3u}")"
        [ -z "$prefix" ] && eprint 'Missing prefix for playlist "%s"\n' "$plname"
        tput bold setaf 4 >>"$tmp"
        printf '  %s ' "$prefix" >>"$tmp"
        if rg -Fq -- "+$plfile" "$setting"; then
            tput setaf 10 >>"$tmp"
        elif rg -Fq -- "-$plfile" "$setting"; then
            tput setaf 9 >>"$tmp"
        else
            tput sgr0 setaf 7 >>"$tmp"
        fi
        printf "%-${entryw}s" "${plname%.m3u}" >>"$tmp"
        i=$((i + 1))
        [ "$((i % entrycols))" -eq 0 ] && {
            cat -- "$tmp"
            :>"$tmp"
            printf '\n'
            i=0
        }
    done
    [ -s "$tmp" ] && {
        cat -- "$tmp"
        printf '\n'
    }

    # Show prompt
    tput sgr0
    printf '\n> '
}

main
while read -r line; do
    main "$line"
done
