#!/bin/sh

# This script first mirrors files and directories designated for sync
# to a special sync directory used by Syncthing. After the mirror,
# it backs up all of that directory's contents to OneDrive.
# 
# DEPENDENCIES
# - rclone

# List of absolute paths to send to OneDrive
# You can optionally specify target path, e.g.
#   ~/Documents
# will drop all contents to "$syncroot/Documents",
# however
#   ~/Documents Papers
# will drop all contents to "$syncroot/Papers"
sourcelist="$HOME/.config/spush.list"

# The directory to be synced (recursively)
syncroot="$HOME/Sync"

# This holds the output of the last rsync command
log_rsync="$HOME/.cache/spush-rsync.log"

# This holds the output of the last rclone command
log_rclone="$HOME/.cache/spush-rclone.log"
log_rclone_tmp="$(mktemp --tmpdir spush.XXXXX)"  # rclone can't append, so use this as buffer

# Pass -e to edit source list
[ "$1" = "-e" ] && "$EDITOR" "$sourcelist" && exit

# Argument 1: source path (follows rsync's trailing slash convention)
# Argument 2: target path (relative to $syncroot)
# The data will be saved inside the Sync directory on OneDrive
push () {
    [ $# -ne 2 ] && echo 'spush: push: invalid number of arguments' >&2 && return 1
    src="$1" dest="$2"
    printf '\n%s\nSRC="%s", DEST="%s"\n' "---------------[$(date)]---------------" "$src" "$dest" | tee -a "$log_rsync" "$log_rclone"
    [ ! -d "$src" ] && [ ! -f "$src" ] && echo "spush: push: invalid path $(tput setaf 1)$src$(tput setaf 7)" >&2 && return 1
    [ -n "$dest" ] && [ ! -d "$syncroot/$dest" ] && mkdir -p -- "$syncroot/$dest"
    printf '\b%s\n' "$(tput bold)Mirroring $(tput setaf 2)$src$(tput setaf 15) to $(tput setaf 3)$syncroot/$dest$(tput setaf 7)...$(tput sgr0)"
    rsync -vrptgoD --delete -- "$src" "$syncroot/$dest" | tee -a "$log_rsync"
    printf '\n%s\n' "$(tput bold)Uploading $(tput setaf 2)$syncroot/$dest$(tput setaf 15) to $(tput setaf 3)onedrive://$(basename -- "$syncroot")/$dest$(tput setaf 7)...$(tput sgr0)"
    if command -v 'rclone'; then
        rclone sync --progress --combined "$log_rclone_tmp" "$syncroot/$dest" onedrive:"$(basename -- "$syncroot")/$dest"
        cat "$log_rclone_tmp" >>"$log_rclone"
        if grep -q '^!' "$log_rclone"; then
            notify-send -u critical 'spush' "An error occurred while uploading to OneDrive.\nSee <b>$(printf "%s" "$log_rclone" | sed "s/\/home\/[^/]*/\~/")</b>\nfor more information."
        fi
    else
        printf 'rclone command not detected, skipping backup stage\n' | tee -a "$log_rclone"
    fi
}

[ ! -f "$sourcelist" ] && echo 'spush: sources list file not found' >&2 && exit 1
while read -r line; do
    # Strip comments
    line="$(printf '%s\n' "$line" | sed 's/#.*//')"

    # Convert tilde to $HOME
    line="$(printf '%s\n' "$line" | sed "s/^\~/$(printf '%s\n' "$HOME" | sed 's|/|\\/|g')/g")"

    # If there's a path left, push it
    if [ -n "$line" ]; then
        # Extract source and target paths (target path is optional)
        spath="$(printf '%s' "$line" | awk '{ print $1 }')"
        tpath="$(printf '%s' "$line" | awk '{ print $2 }')"
        [ -z "$tpath" ] && tpath="$(basename -- "$spath")"
        if [ -d "$spath" ]; then
            push "$spath" "$tpath"
        else
            printf 'spush: directory "%s" does not exist (skipping)\n' "$line" >&2
        fi
    fi
done <"$sourcelist"

