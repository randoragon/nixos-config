#!/bin/sh -e
# A little script to help with gpg-encrypted directories.

help () {
    echo 'Usage:  secrets [-h,--help] ACTION DIR'
    echo
    echo 'Actions:'
    echo '  d|decrypt   Decrypt secrets.gpg into a tmpdir and symlink as secrets.'
    echo '  s|save      Overwrite secrets.gpg to reflect the decrypted secrets.'
    echo '  m|modified  Checks whether the decrypted secrets have been modified.'
    echo '  c|clean     Same as save, but also destroy the tmpdir and symlink.'
    echo
    echo
    echo 'Another usage:  secrets ACTION DIR INPUT OUTPUT'
    echo
    echo 'Actions:'
    echo '  oe          Oneshot-encrypt INPUT into OUTPUT (directories are gzipped).'
    echo '  od          Oneshot-decrypt INPUT into OUTPUT (directories are gzipped).'
    echo
    echo "For the last two commands, '-' may be used to denote stdin/stdout."
}

# Handle printing help
[ "$1" = '-h' ] || [ "$1" = '--help' ] && help && exit
case "$1" in
    d|s|m|c|decrypt|save|modified|clean) [ $# -ne 2 ] ;;
    oe|od) [ $# -ne 4 ] ;;
    *) true ;;
esac && help && exit 1

REPO="$2"
[ ! -d "$REPO" ] && {
    echo 'secrets: the repository directory does not exist' >&2
    exit 2
}
GPGID_E="$(cat -- "$REPO/.gpgid-encrypt")"
GPGID_S="$(cat -- "$REPO/.gpgid-sign")"
SECRETS="$REPO/secrets"
SECRETS_GPG="$REPO/secrets.gpg"
CHECKSUM="$REPO/.secrets-cksum"
ACTION="$1"
INPUT="$3"
OUTPUT="$4"

# Credit: https://stackoverflow.com/a/545413/10792539
dir_cksum () {
    (cd "$1" && find . -type f -print0 \! -path '*/.git/*' \
        | sort -z | xargs -0 cat | sha1sum)
}

decrypt () {
    if [ -L "$SECRETS" ]; then
        # Secrets already decrypted -- there is nothing to do
        return
    elif [ -e "$SECRETS" ]; then
        printf "secrets: a file with a conflicting name '%s' already exists -- aborting\n" "$SECRETS" >&2
        exit 1
    fi

    tmpd="$(mktemp --tmpdir -d secrets.XXXXX)"

    gpg --quiet --batch --decrypt -- "$SECRETS_GPG" 2>/dev/null | tar -xzf - -C "$tmpd"
    dir_cksum "$tmpd" >"$CHECKSUM"
    ln -s -- "$tmpd/secrets" "$SECRETS"

    tput bold setaf 9
    echo "! $(echo "$SECRETS" | sed "s$HOME~") DECRYPTED !"
    tput sgr0
    printf 'To make changes persistent, remember to run %s...\n' \
        "$(tput setaf 6)secrets save DIR$(tput sgr0)"
}

clean () {
    save

    secrets_dir="$(readlink -- "$SECRETS")"
    # Make sure secrets_dir/.. is a subdirectory of TMPDIR,
    # because the next step is a little scary
    tmpd="$(realpath -- "$secrets_dir/..")"
    if [ -n "$(find "${TMPDIR:-/tmp}" -path "$tmpd/*" -print -quit 2>/dev/null)" ]; then
        rm -rf -- "$tmpd"
    else
        printf 'secrets: error! secrets_dir/.. is not a subdirector of TMPDIR, this should not happen (%s)\n' "$tmpd" >&2
        exit 2
    fi
    rm -rf -- "$SECRETS" "$CHECKSUM"

    tput bold setaf 2
    echo "$(echo "$SECRETS" | sed "s$HOME~") encrypted"
    tput sgr0
}

save () {
    # Error handling
    if [ ! -L "$SECRETS" ]; then
        echo 'secrets: the secrets are locked' >&2
        return
    fi
    secrets_dir="$(readlink -- "$SECRETS")"
    if [ ! -d "$secrets_dir" ]; then
        printf 'secrets: error! the secrets symlink does not point to a directory\n' >&2
        exit 2
    fi

    # Check if any secrets have been modified and need re-encrypting.
    # Aside from a performance boost, this is necessary due to gpg encryption being
    # non-deterministic (there's probably some salt involved).
    prev_cksum="$(cat -- "$CHECKSUM" 2>/dev/null || :)"
    new_cksum="$(dir_cksum "$secrets_dir")"
    if [ "$new_cksum" != "$prev_cksum" ]; then
        printf 'Secrets were modified, re-encrypting... '
        tmp="$(mktemp --tmpdir secrets.XXXXX)"
        tar -C "$(dirname -- "$secrets_dir")" -czf "$tmp" -- "$(basename -- "$secrets_dir")"
        gpg --quiet --batch --yes --output "$SECRETS.gpg" --encrypt --recipient "$GPGID_E" --sign --local-user "$GPGID_S" -- "$tmp"
        echo "$new_cksum" >"$CHECKSUM"
        rm -f -- "$tmp"
        echo 'done.'
    else
        echo 'No changes to secrets were made.'
    fi
}

modified () {
    # Error handling
    if [ ! -L "$SECRETS" ]; then
        echo 'secrets: the secrets are locked' >&2
        exit 1
    fi
    secrets_dir="$(readlink -- "$SECRETS")"
    if [ ! -d "$secrets_dir" ]; then
        printf 'secrets: error! the secrets symlink does not point to a directory\n' >&2
        exit 2
    fi

    prev_cksum="$(cat -- "$CHECKSUM" 2>/dev/null || :)"
    if [ "$(dir_cksum "$secrets_dir")" = "$prev_cksum" ]; then
        echo 'The secrets have not been modified.'
        exit 1
    else
        echo 'The secrets have been modified.'
        exit
    fi
}

oneshot_encrypt () {
    if [ "$INPUT" != '-' ] && [ -d "$INPUT" ]; then
        tar -czO -- "$INPUT" | gpg --quiet --batch --yes --output "$OUTPUT" --encrypt --recipient "$GPGID_E" --sign --local-user "$GPGID_S" -- -
    else
        gpg --quiet --batch --yes --output "$OUTPUT" --encrypt --recipient "$GPGID_E" --sign --local-user "$GPGID_S" -- "$INPUT"
    fi
}

oneshot_decrypt () {
    gpg --quiet --batch --output "$OUTPUT" --decrypt -- "$INPUT" 2>/dev/null
}

# A broken symlink should simply be removed; it may have been left after a reboot
if [ -L "$SECRETS" ] && [ ! -e "$SECRETS" ]; then
    rm -f -- "$SECRETS"
fi
case "$ACTION" in
    d|decrypt) decrypt ;;
    s|save) save ;;
    c|clean) clean ;;
    m|modified) modified ;;
    oe) oneshot_encrypt ;;
    od) oneshot_decrypt ;;
    *)
        echo 'secrets: invalid action' >&2
        help
        exit 1
esac
