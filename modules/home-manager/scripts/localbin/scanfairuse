#!/bin/sh

# This script validates whether there's ANY problems with the Fair Use playlist. If this script
# does not yield any errors, all the music on the Fair Use playlist should be safe to play live.
#
# ACTIONS:
# 1. Read all paths from the Fair Use playlist and examine the files' metadata.
# 2. If some tag is missing, the script will run "addfairuse" to prompt the user for correction.
# 3. If the artist name does not exist on the artists.yaml file, print that artists' name.
#
# DEPENDENCIES
# - id3ted

pl="$HOME/Music/Playlists/#Fair Use.m3u"
base="$HOME/Music"
artists="$HOME/Music/Playlists/artists.yaml"

# Normally if a WCOP frame (license URL) is missing, this script
# will warn about that. However, if  the TCOP (license name) frame
# matches this whitelisted phrase, WCOP will be ignored.
whitephrase="Approved Via Direct Message"

# To avoid repeating the same warnings,
# they will be dumped into this variable
warnings=

while read -r relative <&3; do
    f="$base/$relative"
    [ ! -f "$f" ] && echo "invalid path \"$f\" detected, run plfix." >&2 && exit 1

    frames="$(id3ted -l -- "$f")"
    artist="$(printf "%s" "$frames" | sed -n "s/^TPE1: //p")"
    license="$(printf "%s" "$frames" | sed -n "s/^TCOP: //p")"

    if  [ -z "$artist" ] || \
        [ -z "$license" ] || \
        ! printf "%s" "$frames" | grep -q "^TIT2: " || \
        ! printf "%s" "$frames" | grep -q "^WXXX: \[origin\]";
    then
        printf "tags missing from '%s', running addfairuse...\n" "$relative"
        sleep 1
        addfairuse "$f"
    elif ! printf "%s" "$frames" | grep -q "^WCOP: " && [ "$license" != "$whitephrase" ]; then
        warning="$(printf "warning: license '%s' has no URL (%s)" "$license" "$relative")"
        printf "%s" "$warnings" | grep -q "$warning" || {
            printf "%s\n" "$warning"
            warnings="$warnings\n$warning"
        }
    elif ! grep -qF "artist: $artist" "$artists"; then
        warning="$(printf "'%s' not found in artists.yaml" "$artist")" 
        printf "%s" "$warnings" | grep -q "$warning" || {
            printf "%s\n" "$warning"
            warnings="$warnings\n$warning"
        }
    fi
done 3<"$pl"

