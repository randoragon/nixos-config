#!/bin/sh

# Copyright © 2020 Randoragon
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# For options and usage examples run "mkar -h" or "mkar --help"
# DEPENDENCIES:
# - GNU tar
# - gzip
# - bzip2
# - xz
# - zip
# - rar
# - 7z



# Error codes
ERR_BADARG=1
ERR_EXISTINGFILE=2
ERR_MERGEDUPE=3
ERR_BADPATH=4
ERR_ORPHANPATH=5
ERR_EXECUTION=6
HELP_MSG="Try 'mkar --help' for more information."

# stderr wrappers
eecho ()   { [ "$noerr" -ne 1 ] && printf "%s\n%s\n" "$@" "$HELP_MSG" >&2 ; } # Errors
wecho ()   { [ "$nowarn" -ne 1 ] && printf "%s\n" "$@" >&2 ; }           # Warnings
debug ()   { [ -n "$DEBUG" ] && printf "%s\n" "$@" >&2 ; }
DEBUG=

# Checks if every argument is a file/directory/symlink
exists () {
    for y in "$@"; do
        [ ! -f "$y" ] && [ ! -d "$y" ] && [ ! -L "$y" ] && return
    done
    printf '1'
}

# Ranks a path by the number of parent dirs
dirrank () {
    printf "%s" "$(printf "%s" "$(realpath -s -- "$1")" | tr -cd '/' | wc -m)"
}

# Finds the nth parent dir of a path (1st is always root)
ndirname () {
    [ "$2" -eq 1 ] && printf "/" && return 0
    p="$(realpath -s -- "$1")"
    max="$(dirrank "$p")"
    for i in $(seq "$((max - $2 + 1))"); do
        p="$(dirname -- "$p")"
    done
    printf "%s" "$p/"
}

# Does the same thing as ndirname, but 1 is basename, 2 is basename of basename, etc.
nbasename () {
    p="$(basename -- "$1")"
    b="$(dirname -- "$1")"
    for i in $(seq "$(($2 - 1))"); do
        p="$(basename -- "$b")/$p"
        b="$(dirname -- "$b")"
    done
    printf "%s" "$p"
}

# Help page
usage () {
echo \
"MKAR - MaKe ARchive

NAME
        mkar - a simple tar/zip/rar/jar/7z wrapper for creating archives

SYNOPSIS
    mkar OPTIONS PATH... [NAME]

DESCRIPTION
    Creates an archive \"NAME.EXT\" with all PATHs stored within.
    EXT is dependant on the used (if used) compression program,
    which can be defined using similar options as GNU tar,
    or omitted for a plain \"NAME.tar\" file.

    Symlinks are automatically dereferenced. Orphaned symlinks
    are skipped with a warning issued to stderr.

    An additional feature is subdirectory trimming.
    Most archiving utilities doesn't handle absolute paths well
    and unnecessarily recreate the entire subdirectory structure.
    For example, running:

        tar -chzf archive.tar.gz /home/user/file

    ...creates an archive with two subdirectories: home and user
    mkar cleverly cuts off as much of the path from the left
    as possible, so that running:

        mkar -z /home/user/file archive

    ...is a wrapper for:

        tar -chzf archive.tar.gz -C /home/user file

    When given multiple PATHs, the script will figure out the
    \"lowest common subdirectory\" and make that the root of
    the newly created archive.

    NAME can be omitted if only one PATH is supplied. When
    that happens, NAME is assumed to be \"PATH.EXT\".
    NAME cannot be omitted if using the --input option.

OPTIONS
    -f, --force
        If NAME collides with an existing file, overwrite it.
        By default the operation will be aborted.

    -m, --merge
        By default, if PATHs reference files/dirs from different
        subdirectories, the subdirectory structure is preserved
        inside the new archive. This option prevents that by
        dropping all of the files/dirs in one common directory
        prior to compression. Aborts in case of name collisions.
        You can pass this parameter twice to skip colliding
        files instead of aborting the entire operation. PATHs
        passed earlier take priority over the latter ones.

    -i, --input
        Reads newline-delimited paths from stdin. NAME must
        be passed as an argument and cannot be omitted.

    -v, --verbose
        Enables verbose output from the compression program.
        This usually results in paths getting printed during
        the creation of an archive.
        If using tar (gzip, bzip2, xz or no compression),
        you can pass this option multiple times for extra
        levels of verbosity (read tar's man page on -v).

    -p, --pretend
        Prints the command(s) that would be run and exits.
        Note that if using the -m option, a temporary location
        will be created to dump symlinks to all the PATHs in,
        and those alternate paths will be printed instead.

    -z, --gzip
        Compress to NAME.tar.gz

    -j, --bzip2
        Compress to NAME.tar.bz

    -J, --xz
        Compress to NAME.tar.xz

    -Z, --zip
        Compress to NAME.zip

    -r, --rar
        Compress to NAME.rar

    -R, --jar
        Compress to NAME.jar

    -7, --7z
        Compress to NAME.7z

    -q, --quiet
        Pass it once to suppress just warnings, or twice
        to suppress all messages.
        Note that this only affects direct output from mkar,
        any third-party programs will still print their
        respective warnings and errors. This option does
        not contradict the --verbose option.

EXAMPLES
    Create a tar archive for system and user xinitrcs:

        mkar -m /etc/X11/xinit/xinitrc ~/.xinitrc xfiles

    Compress a single file to file.tar.gz:

        mkar -z file

    Backup documents directory structure to a zip file:

        mkar -Z ~/Documents docs_backup

    Archive all txts from home directory in a tar file:

        find ~ -maxdepth 1 -type f -name '*.txt' | mkar -i txts

RETURN CODES
    0 - finished successfully
    1 - failed to parse arguments
    2 - FILE exists and no --force option passed
    3 - duplicate filenames when merging and only one -m passed
    4 - invalid PATH (does not exist)
    5 - PATH is an orphaned symlink
    6 - execution error

AUTHOR
    Written by Randoragon.

BUGS
    Note that I wrote this script for myself without the intent
    of making it a public product, so I don't guarantee anything.
    Email:   <randoragongamedev@gmail.com>
    Discord: Randoragon#1958

COPYRIGHT
    Copyright © 2020 Randoragon, MIT License
"
}

# Handle options
autoname=0
overwrite=0
merge=0
mnoskip=0
stdin=0
pretend=0
verbose=
compress=t
nowarn=0
noerr=0
OPTS="$(getopt -n mkar -s sh -o qhfmivpzjJZrR7 -l quiet,help,merge,input,verbose,force,pretend,gzip,bzip2,xz,zip,rar,jar,7z -- "$@")"
[ $? -eq 1 ] && echo "$HELP_MSG" && exit $ERR_BADARG
eval set -- "$OPTS"
while true; do
    case "$1" in
        -f|--force) overwrite=1 ; shift ;;
        -m|--merge) [ $merge -eq 1 ] && mnoskip=1 || merge=1 ; shift ;;
        -i|--input) stdin=1 ; shift ;;
        -v|--verbose) verbose="v$verbose" ; shift ;;
        -p|--pretend) pretend=1 ; shift ;;
        -z|--gzip) compress=z ; shift ;;
        -j|--bzip2) compress=j ; shift ;;
        -J|--xz) compress=J ; shift ;;
        -Z|--zip) compress=Z ; shift ;;
        -r|--rar) compress=r ; shift ;;
        -R|--jar) compress=R ; shift ;;
        -7|--7z) compress=7 ; shift ;;
        -h|--help) usage ; exit ; shift ;;
        -q|--quiet) [ $nowarn -eq 1 ] && noerr=1 || nowarn=1 ; exit ; shift ;;
        --) shift ; break ;;
        *) break ;;
    esac
done
[ $# -eq 1 ] && [ $stdin -ne 1 ] && autoname=1

# Set up some variables
paths=
[ $# -eq 0 ] && eecho "mkar: Not enough arguments." && exit $ERR_BADARG

# Handle reading from stdin
[ $stdin -eq 1 ] && {
    cmd="$0"
    opts="$verbose$compress"
    opts="$opts$([ $merge -eq 1 ] && printf m)"
    opts="$opts$([ $mnoskip -eq 1 ] && printf m)"
    opts="$opts$([ $overwrite -eq 1 ] && printf f)"
    opts="$opts$([ $pretend -eq 1 ] && printf p)"
    opts="$opts$([ $nowarn -eq 1 ] && printf q)"
    opts="$opts$([ $noerr -eq 1 ] && printf q)"
    opts="$([ -n "$opts" ] && printf -- '-')$opts"
    outfile="$1"
    while read -r line; do
        paths="$paths
$line"
    done
    handlestdin () {
        IFS="
"
        "$cmd" "$opts" -- $@ "$outfile"
        unset IFS
    }
    handlestdin "$paths"
    exit
}

# Validate and parse paths
i=1
tmp="$(mktemp -dp /tmp mkar_validateXXX)"
for x in "$@"; do
    [ -z "$(exists "$x")" ] && { [ $autoname -eq 1 ] || [ $i -ne $# ]; } && eecho "mkar: Invalid path: '$x'" && exit $ERR_BADPATH
    [ -z "$(readlink -e -- "$x")" ] && { [ $autoname -eq 1 ] || [ $i -ne $# ]; } && eecho "mkar: Orphaned symlink: '$x'" && exit $ERR_ORPHANPATH
    [ -n "$(exists "$tmp/$(realpath -s -- "$x")")" ] 
    [ $i -lt $# ] || [ $autoname -eq 1 ] && paths="$paths
$x"
    [ $i -eq $# ] && {
        ext () {
            [ $compress = t ] && printf tar && return
            [ $compress = z ] && printf tar.gz && return
            [ $compress = j ] && printf tar.bz && return
            [ $compress = J ] && printf tar.xz && return
            [ $compress = Z ] && printf zip    && return
            [ $compress = r ] && printf rar    && return
            [ $compress = R ] && printf jar    && return
            [ $compress = 7 ] && printf 7z     && return
        }
        outfile="$PWD/""$(basename -- "$x")"".$(ext)"
        [ -n "$(exists "$outfile")" ] && {
            if [ "$overwrite" -ne 1 ]; then
                eecho "mkar: '$outfile' already exists. Use -f to force an overwrite."
                exit $ERR_EXISTINGFILE
            else
                rm -rf -- "$outfile"
            fi
        }
    }
    i=$((i + 1))
done

# Branch by compression program
case $compress in
    t|z|j|J)
        # Handle merge option
        if [ $merge -eq 1 ]; then
            tmp="$(mktemp -dp /tmp mkar_mergeXXX)"
            rootdir="$tmp"
            move () {
                IFS="
"
                trimmedpaths=
                for x in $@; do
                    [ -z "$(readlink -e -- "$x")" ] && wecho "Warning: '$x' is an orphaned symlink (skipping)." && continue
                    t="$(basename -- "$x")"
                    d="$tmp/$t"
                    [ -n "$(exists "$d")" ] && {
                        [ $mnoskip -eq 1 ] && wecho "Warning: duplicate name '$t' (skipping)." && continue
                        eecho "mkar: duplicate name '$t'." && exit $ERR_MERGEDUPE
                    }
                    ln -s "$(realpath -- "$x")" "$d"
                    trimmedpaths="$trimmedpaths
$t"
                done
                unset IFS
            }
            move "$paths"
        else

            # Find the lowest common parent dir
            check () {
                IFS="
"
                foo () { printf "%s" "$1"; }
                lastval="$(ndirname "$(foo $@)" $i)"
                for p in $@; do
                    [ "$(ndirname "$p" $i)" != "$lastval" ] && unset IFS && return 1
                    lastval="$(ndirname "$p" $i)"
                done
                printf "1"
                unset IFS
            }
            i="$(dirrank "$1")"
            while [ -z "$(check "$paths")" ]; do
                i=$((i - 1))
            done
            rootdirindex="$i"

            # Trim all the paths to leave out only the right portion not included in $rootdir
            trimmedpaths=
            trim () {
                IFS="
"
                foo () { printf "%s" "$1"; }
                rootdir="$(ndirname "$(foo $@)" "$rootdirindex")"
                for p in $@; do
                    q="$(realpath -s -- "$p")"
                    trimmedpaths="$trimmedpaths
$(nbasename "$q" "$(($(dirrank "$q") - rootdirindex + 1))")"
                done
                unset IFS
            }
            trim "$paths"
        fi

        # Create the archive
        createtar () {
            IFS="
"
            [ $compress = t ] && compress=
            opts="-ch$compress$verbose"f
            if [ $pretend -eq 1 ]; then
                printf "%s" "tar $opts '$outfile' -C '$rootdir' "
                foo () { for line in $@; do printf "%s" "'$line' "; done; }
                foo "$trimmedpaths"
                printf '\n'
            else
                tar "$opts" "$outfile" -C "$rootdir" $@
            fi
            unset IFS
        }
        createtar "$trimmedpaths"

        # Delete temporary data
        [ -d "$tmp" ] && rm -rf "$tmp"
    ;;
    Z|r|R|7)
        # Handle merge option
        if [ $merge -eq 1 ]; then
            tmp="$(mktemp -dp /tmp mkar_mergeXXX)"
            rootdir="$tmp"
            move () {
                IFS="
"
                trimmedpaths=
                for x in $@; do
                    [ -z "$(readlink -e -- "$x")" ] && wecho "Warning: '$x' is an orphaned symlink (skipping)." && continue
                    t="$(basename -- "$x")"
                    d="$tmp/$t"
                    [ -n "$(exists "$d")" ] && {
                        [ $mnoskip -eq 1 ] && wecho "Warning: duplicate name '$t' (skipping)." && continue
                        eecho "mkar: duplicate name '$t'." && exit $ERR_MERGEDUPE
                    }
                    ln -s "$(realpath -- "$x")" "$d"
                    trimmedpaths="$trimmedpaths
$t"
                done
                unset IFS
            }
            move "$paths"
        else
            # tar supports the -C parameter when creating archives, which basically allows us
            # to set the "root directory" of an archive to anything we want, which is useful.
            # The programs for zipping, raring, jaring and 7zipping do not have that option,
            # so instead we have to cd into the "root directory" of the soon-to-be archive,
            # create it from the root with relative paths, and cd back to where we came from.

            # Find the lowest common parent dir (rootdir)
            check () {
                IFS="
"
                foo () { printf "%s" "$1"; }
                lastval="$(ndirname "$(foo $@)" $i)"
                for p in $@; do
                    [ "$(ndirname "$p" $i)" != "$lastval" ] && unset IFS && return 1
                    lastval="$(ndirname "$p" $i)"
                done
                printf "1"
                unset IFS
            }
            i="$(dirrank "$1")"
            while [ -z "$(check "$paths")" ]; do
                i=$((i - 1))
            done
            rootdirindex="$i"

            # Trim all the paths to leave out only the right portion not included in $rootdir
            trimmedpaths=
            trim () {
                IFS="
"
                foo () { printf "%s" "$1"; }
                rootdir="$(ndirname "$(foo $@)" $rootdirindex)"
                for p in $@; do
                    q="$(realpath -s -- "$p")"
                    trimmedpaths="$trimmedpaths
$(nbasename "$q" $(($(dirrank "$q") - rootdirindex + 1)))"
                done
                unset IFS
            }
            trim "$paths"
        fi

        # Create the archive
        create () {
            IFS="
"
            if [ $pretend -eq 1 ]; then
                printf "%s\n" "cd '$rootdir'"
                case $compress in
                    Z) printf "%s" "zip -$([ -z "$verbose" ] && printf q)r '$outfile' "
                        ;;
                    r) printf "%s" "rar $([ -z "$verbose" ] && printf "%s" '-idq') a '$outfile' "
                        ;;
                    R) printf "%s" "jar Mc$([ -n "$verbose" ] && printf v)f '$outfile' "
                        ;;
                    7) printf "%s" "7z a -l -y -t7z '$outfile' "
                        ;;
                esac
                foo () { for line in $@; do printf "%s" "'$line' "; done; }
                foo "$trimmedpaths"
                [ "$compress" = 7 ] && [ -z "$verbose" ] && printf -- '>&-'
                printf "\n%s\n" "cd '$PWD'"
            else
                prevpwd="$PWD"
                cd -- "$rootdir" || exit "$ERR_EXECUTION"
                case $compress in
                    Z) zip -"$([ -z "$verbose" ] && printf q)"r "$outfile" $@
                        ;;
                    r) rar "$([ -z "$verbose" ] && printf "%s" '-idq')" a "$outfile" $@
                        ;;
                    R) jar Mc"$([ -n "$verbose" ] && printf v)"f "$outfile" $@
                        ;;
                    7) if [ -z $verbose ]; then 7z a -l -y -t7z "$outfile" $@ >&-; else 7z a -l -y -t7z "$outfile" $@; fi
                        ;;
                esac
                cd -- "$prevpwd" || exit "$ERR_EXECUTION"
            fi
            unset IFS
        }
        create "$trimmedpaths"

        # Delete temporary data
        [ -d "$tmp" ] && rm -rf "$tmp"
    ;;
esac
