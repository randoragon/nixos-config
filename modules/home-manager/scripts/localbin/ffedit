#!/bin/sh

# Transcode video and audio files to an editing-friendly format.
# Suitable for DaVinci Resolve (free version), and in general faster due to
# less compression.
#
# Sources:
# - https://wiki.archlinux.org/title/DaVinci_Resolve#MP4,_H.264,_H.265_and_AAC_Support
# - https://documents.blackmagicdesign.com/SupportNotes/DaVinci_Resolve_18_Supported_Codec_List.pdf

set -e

help () {
    echo 'Usage:'
    echo '  ffedit FILE [NAME] - convert a single file (NAME is extension-less)'
    echo '  ffedit DIR NEWDIR  - convert a directory of files'
    echo
    echo 'Video is converted to DNxHD MOV, audio to PCM 24-bit WAV.'
    echo 'Input files are checked and conversion is done only when necessary.'
}

if [ "$1" = '-h' ] || [ "$1" = '--help' ]; then
    help
    exit
fi

convert () {
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo 'ffedit: convert: target or output empty' >&2
        return 1
    fi
    info="$(ffprobe -hide_banner -- "$1" 2>&1)"
    ffmpeg_flags='-map 0'
    ffmpeg_ext=
    work_to_do=

    video_codec="$(echo "$info" | grep -o 'Stream #.*: Video: .*')" || true
    video_codec="${video_codec##*Video: }"
    if [ -n "$video_codec" ]; then
        ffmpeg_ext=mov
        case "$video_codec" in
            dnxhd*)
                ffmpeg_flags="$ffmpeg_flags -c:v copy"
                ;;
            *)
                ffmpeg_flags="$ffmpeg_flags -c:v dnxhd -profile:v dnxhr_hq -pix_fmt yuv422p"
                work_to_do=1
                ;;
        esac
    else
        ffmpeg_ext=wav
    fi

    audio_codec="$(echo "$info" | grep -o 'Stream #.*: Audio: .*')" || true
    audio_codec="${audio_codec##*Audio: }"
    if [ -n "$audio_codec" ]; then
        case "$audio_codec" in
            pcm_s32le*)
                ffmpeg_flags="$ffmpeg_flags -c:a copy"
                ;;
            *)
                ffmpeg_flags="$ffmpeg_flags -c:a pcm_s32le"
                work_to_do=1
                ;;
        esac
    fi

    output_path=
    if [ -n "$3" ]; then
        output_path="$3/$(basename -- "$2").$ffmpeg_ext"
    else
        output_path="$2.$ffmpeg_ext"
    fi

    if [ -n "$work_to_do" ];  then
        if [ "$output_path" = "$1" ]; then
            echo 'ffedit: output and input filenames cannot be the same' >&2
            return 1
        elif [ -f "$output_path" ]; then
            printf "'%s' already exists, overwrite? [y/N] " "$output_path"
            read -r ans
            [ "$ans" != y ] && [ "$ans" != Y ] && return
        elif [ -e "$output_path" ]; then
            printf "ffedit: '%s' already exists\n" "$output_path" >&2
            return 1
        fi

        # shellcheck disable=SC2086
        ffmpeg -hide_banner -y -i "$1" $ffmpeg_flags -- "$output_path"
    else
        printf '%s: there is nothing to do\n' "$1"
    fi
}

# Secret flag, only added for implementing the DIR variant of the command
if [ "$1" = '-d' ]; then
    if [ "$#" -lt 3 ]; then
        echo 'ffedit: invalid number of arguments' >&2
        help
        exit 1
    fi
    output_dir="$2"
    shift 2
fi

target="$1"
output="${2:-${1%.*}}"

if [ -f "$target" ]; then
    convert "$target" "$output" "$output_dir"
elif [ -d "$target" ]; then
    if [ -n "$output_dir" ]; then
        echo 'ffedit: the -d option can only be used with files' >&2
        exit 1
    elif [ -e "$output" ]; then
        printf "ffedit: '%s' already exists\n" "$output" >&2
        exit 1
    fi
    mkdir -p -- "$output"
    find "$target" -type f -exec "$0" -d "$output" '{}' \;
else
    printf "ffedit: '%s' is neither a file nor a directory\n" "$target" >&2
    exit 1
fi
