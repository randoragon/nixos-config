#!/bin/sh

# Edit or create a new Nix devshell. Inspired by https://ayats.org/blog/nix-workflow.
# Dependencies:
# - direnv
# - jq
# - git
#
# Assuming the following directory structure:
#
#   tools
#   |-- envrc
#   |-- flake.lock
#   `-- flake.nix
#
# Running `ds -l` will create symlinks to the project root.
# Running `ds -i` will output relevant gitignore lines.

set -e

echo_gitignore () {
    echo '# Ignore Nix flake and direnv files'
    echo '/.direnv/'
    echo '/.envrc'
    echo '/flake.nix'
    echo '/flake.lock'
}

[ "$1" = '-i' ] && {
    echo_gitignore
    exit
}

[ "$1" = '-l' ] && {
    set -x
    ln -s  tools/envrc       .envrc
    ln -s  tools/flake.nix   flake.nix
    ln -s  tools/flake.lock  flake.lock
    set +x
    exit
}

envrc="$(direnv status --json | jq -r '.["state"].["foundRC"].["path"] // empty')"
[ -n "$envrc" ] && {
    flake="$(dirname -- "$envrc")/flake.nix"
    if [ -f "$flake" ]; then
        $EDITOR '+call search("packages = ")' '+norm %kw' -- "$flake"
    else
        direnv edit
    fi
    exit
}

# Determine flake type
flake_type=git+file
git status -s >/dev/null || {
    echo 'Not inside a git repository. Choose action:'
    echo '[g] Start a new repository here (default)'
    echo '[p] Use "path:."'
    echo '[q] Quit'
    read -r ans
    case "$ans" in
        q) exit ;;
        p) flake_type=path ;;
        *) git init; echo_gitignore >.gitignore ;;
    esac
}

# If envrc does not exist and there is a flake.nix, assume 'use flake' is needed
[ -f tools/flake.nix ] && {
    printf 'use flake %s:.\n' "$flake_type" | $EDITOR tools/envrc
    ln -s tools/envrc .envrc
    exit
}
[ -f flake.nix ] && {
    printf 'use flake %s:.\n' "$flake_type" | $EDITOR .envrc
    exit
}

# If there is no envrc and no flake, start a new flake with a default envrc
mkdir -p tools
cat >tools/flake.nix <<EOF
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
  };

  outputs = { nixpkgs, ... }: let
    system = "x86_64-linux";
    pkgs = nixpkgs.legacyPackages.\${system};
  in {
    devShells.\${system}.default = pkgs.mkShell {
      packages = with pkgs; [
        <,,>
      ];
    };
  };
}
EOF
$EDITOR tools/flake.nix
ln -s tools/flake.nix flake.nix
git add flake.nix
echo 'Added flake.nix to git'
printf 'Create and allow an .envrc? [Y/n]'
read -r ans
[ -z "$ans" ] || [ "$ans" = Y ] || [ "$ans" = y ] && {
    printf 'use flake %s:.\n' "$flake_type" >tools/envrc
    ln -s tools/envrc .envrc
    direnv allow .
}
