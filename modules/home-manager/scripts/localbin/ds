#!/bin/sh

# Edit or create a new Nix devshell. Inspired by https://ayats.org/blog/nix-workflow.
# Dependencies:
# - direnv
# - jq
# - git
#
#
# `ds -t` is a special subcommand that transforms this directory structure:
#
#   .envrc
#   flake.nix
#   flake.lock
#
# into this instead:
#
#   tools
#   |-- envrc
#   |-- flake.lock
#   `-- flake.nix
#   .envrc        -> tools/envrc        (symlink)
#   flake.nix     -> tools/flake.nix    (symlink)
#   flake.lock    -> tools/flake.lock   (symlink)
#
# The latter should be preferred if possible, because I find keeping Nix-specific
# files in project root directory to be ugly and a little inconsiderate.

set -e

status () {
    tput bold setaf 3
    printf 'ds) '
    tput sgr0
    # shellcheck disable=SC2059
    printf "$@"
}

# Find the envrc, if inside a direnv project
envrc="$(direnv status --json | jq -r '.["state"].["foundRC"].["path"] // empty')"

[ "$1" = '-t' ] && {
    if [ -n "$envrc" ]; then
        proj_root="$(dirname -- "$envrc")"
    else
        status 'could not find envrc, assuming project root is the current directory\n'
        proj_root=.
    fi
    for file in "$proj_root/.envrc" "$proj_root/flake.nix" "$proj_root/flake.lock"; do
        if [ -f "$file" ] && [ ! -L "$file" ]; then
            mkdir -p tools
            new_file=tools/"${file#.}"
            if [ -f "$new_file" ] && ! cmp -s -- "$file" "$new_file"; then
                status "'%s' already exists and differs from '%s' -- resolve manually\n" "$new_file" "$file"
                continue
            fi
            status "'%s' -> '%s'\n" "$file" "$new_file"
            mv .envrc tools/envrc
            ln -s tools/envrc .envrc
        else
            status "'%s' not found, skipping\n" "$file"
        fi
    done
    exit
}

[ -n "$envrc" ] && {
    flake="$(dirname -- "$envrc")/flake.nix"
    if [ -f "$flake" ]; then
        $EDITOR '+call search("packages = ")' '+norm %kw' -- "$flake"
    else
        direnv edit
    fi
    exit
}

# Determine flake type
flake_type=git+file
git status -s >/dev/null 2>&1 || {
    status 'Not inside a git repository. Choose action:\n'
    status '[g] Start a new repository here (default)\n'
    status '[p] Use "path:."\n'
    status '[q] Quit\n'
    read -r ans
    case "$ans" in
        q) exit ;;
        p) flake_type=path ;;
        *) git init; echo '.direnv/' >.gitignore ;;
    esac
}

# If envrc does not exist and there is a flake.nix, assume 'use flake' is needed
[ -f flake.nix ] && {
    printf 'use flake %s:.\n' "$flake_type" | $EDITOR .envrc
    exit
}

# If there is no envrc and no flake, start a new flake with a default envrc
cat >flake.nix <<EOF
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
  };

  outputs = { nixpkgs, ... }: let
    system = "x86_64-linux";
    pkgs = nixpkgs.legacyPackages.\${system};
  in {
    devShells.\${system}.default = pkgs.mkShell {
      packages = with pkgs; [
        <,,>
      ];
    };
  };
}
EOF
$EDITOR flake.nix
git add --intent-to-add --force -- flake.nix
echo
status 'Added flake.nix to git\n'
status 'Create and allow an .envrc? [Y/n] '
read -r ans
[ -z "$ans" ] || [ "$ans" = Y ] || [ "$ans" = y ] && {
    printf 'use flake %s:.\n' "$flake_type" >.envrc
    direnv allow .
}
